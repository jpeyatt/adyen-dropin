"use strict";
/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2021 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentResponse = void 0;
class PaymentResponse {
    static getAttributeTypeMap() {
        return PaymentResponse.attributeTypeMap;
    }
}
exports.PaymentResponse = PaymentResponse;
PaymentResponse.discriminator = undefined;
PaymentResponse.attributeTypeMap = [
    {
        "name": "action",
        "baseName": "action",
        "type": "CheckoutAwaitAction | CheckoutBankTransferAction | CheckoutDonationAction | CheckoutOneTimePasscodeAction | CheckoutQrCodeAction | CheckoutRedirectAction | CheckoutSDKAction | CheckoutThreeDS2Action | CheckoutVoucherAction"
    },
    {
        "name": "additionalData",
        "baseName": "additionalData",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "Amount"
    },
    {
        "name": "donationToken",
        "baseName": "donationToken",
        "type": "string"
    },
    {
        "name": "fraudResult",
        "baseName": "fraudResult",
        "type": "FraudResult"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "order",
        "baseName": "order",
        "type": "CheckoutOrderResponse"
    },
    {
        "name": "pspReference",
        "baseName": "pspReference",
        "type": "string"
    },
    {
        "name": "refusalReason",
        "baseName": "refusalReason",
        "type": "string"
    },
    {
        "name": "refusalReasonCode",
        "baseName": "refusalReasonCode",
        "type": "string"
    },
    {
        "name": "resultCode",
        "baseName": "resultCode",
        "type": "PaymentResponse.ResultCodeEnum"
    },
    {
        "name": "threeDS2ResponseData",
        "baseName": "threeDS2ResponseData",
        "type": "ThreeDS2ResponseData"
    },
    {
        "name": "threeDS2Result",
        "baseName": "threeDS2Result",
        "type": "ThreeDS2Result"
    },
    {
        "name": "threeDSPaymentData",
        "baseName": "threeDSPaymentData",
        "type": "string"
    }
];
(function (PaymentResponse) {
    let ResultCodeEnum;
    (function (ResultCodeEnum) {
        ResultCodeEnum[ResultCodeEnum["AuthenticationFinished"] = 'AuthenticationFinished'] = "AuthenticationFinished";
        ResultCodeEnum[ResultCodeEnum["Authorised"] = 'Authorised'] = "Authorised";
        ResultCodeEnum[ResultCodeEnum["Cancelled"] = 'Cancelled'] = "Cancelled";
        ResultCodeEnum[ResultCodeEnum["ChallengeShopper"] = 'ChallengeShopper'] = "ChallengeShopper";
        ResultCodeEnum[ResultCodeEnum["Error"] = 'Error'] = "Error";
        ResultCodeEnum[ResultCodeEnum["IdentifyShopper"] = 'IdentifyShopper'] = "IdentifyShopper";
        ResultCodeEnum[ResultCodeEnum["Pending"] = 'Pending'] = "Pending";
        ResultCodeEnum[ResultCodeEnum["PresentToShopper"] = 'PresentToShopper'] = "PresentToShopper";
        ResultCodeEnum[ResultCodeEnum["Received"] = 'Received'] = "Received";
        ResultCodeEnum[ResultCodeEnum["RedirectShopper"] = 'RedirectShopper'] = "RedirectShopper";
        ResultCodeEnum[ResultCodeEnum["Refused"] = 'Refused'] = "Refused";
        ResultCodeEnum[ResultCodeEnum["Success"] = 'Success'] = "Success";
    })(ResultCodeEnum = PaymentResponse.ResultCodeEnum || (PaymentResponse.ResultCodeEnum = {}));
})(PaymentResponse = exports.PaymentResponse || (exports.PaymentResponse = {}));
//# sourceMappingURL=paymentResponse.js.map