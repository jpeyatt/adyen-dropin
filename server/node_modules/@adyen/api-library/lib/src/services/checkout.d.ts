import ApiKeyAuthenticatedService from "../apiKeyAuthenticatedService";
import Client from "../client";
import { IRequest } from "../typings/requestOptions";
import { PaymentRequest, PaymentResponse, PaymentMethodsRequest, PaymentMethodsResponse, PaymentLinkResource, CreatePaymentLinkRequest, DetailsRequest, PaymentSetupRequest, PaymentSetupResponse, PaymentVerificationRequest, PaymentVerificationResponse, CheckoutUtilityRequest, CheckoutUtilityResponse, CheckoutBalanceCheckRequest, CheckoutBalanceCheckResponse, CheckoutCreateOrderRequest, CheckoutCreateOrderResponse, CheckoutCancelOrderRequest, CheckoutCancelOrderResponse } from "../typings/checkout/models";
declare class Checkout extends ApiKeyAuthenticatedService {
    private readonly _payments;
    private readonly _paymentMethods;
    private readonly _paymentsDetails;
    private readonly _paymentSession;
    private readonly _paymentsResult;
    private readonly _paymentLinks;
    private readonly _paymentLinksId;
    private readonly _originKeys;
    private readonly _paymentMethodsBalance;
    private readonly _orders;
    private readonly _ordersCancel;
    constructor(client: Client);
    payments(paymentsRequest: PaymentRequest, requestOptions?: IRequest.Options): Promise<PaymentResponse>;
    paymentMethods(paymentMethodsRequest: PaymentMethodsRequest): Promise<PaymentMethodsResponse>;
    paymentLinks(paymentLinkRequest: CreatePaymentLinkRequest): Promise<PaymentLinkResource>;
    getPaymentLinks(linkId: string): Promise<PaymentLinkResource>;
    updatePaymentLinks(linkId: string, status: "expired"): Promise<PaymentLinkResource>;
    paymentsDetails(paymentsDetailsRequest: DetailsRequest, requestOptions?: IRequest.Options): Promise<PaymentResponse>;
    paymentSession(paymentSessionRequest: PaymentSetupRequest, requestOptions?: IRequest.Options): Promise<PaymentSetupResponse>;
    paymentResult(paymentResultRequest: PaymentVerificationRequest): Promise<PaymentVerificationResponse>;
    originKeys(originKeysRequest: CheckoutUtilityRequest): Promise<CheckoutUtilityResponse>;
    paymentMethodsBalance(paymentMethodsBalanceRequest: CheckoutBalanceCheckRequest): Promise<CheckoutBalanceCheckResponse>;
    orders(ordersRequest: CheckoutCreateOrderRequest): Promise<CheckoutCreateOrderResponse>;
    ordersCancel(ordersCancelRequest: CheckoutCancelOrderRequest): Promise<CheckoutCancelOrderResponse>;
}
export default Checkout;
